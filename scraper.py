#!/usr/bin/env python

"""Scrapes information from US-CERT and parses it into a formatted list of
   HIGH and MEDIUM vulnerabilities
"""


from lxml import html
import requests
import os.path

__author__ = "Peter Mosmans"
__copyright__ = "Copyright 2015, Go Forward"
__license__ = "GPL"
__version__ = "0.0.1"
__maintainer__ = "Peter Mosmans"
__contact__ = "support@go-forward.net"
__status__ = "Development"

bulletin = 'SB15-250'
url = 'https://www.us-cert.gov/ncas/bulletins/{0}'.format(bulletin)
filename = '{0}.htm'.format(bulletin)


class Vulnerability:
    """Encapsulates vulnerability"""

    def __init__(self, vendor, product, description, published, cvss,
                 cvss_score, source_info):
        self.vendor = vendor
        self.product = product
        self.description = description
        self.published = published
        self.cvss = cvss
        self.cvss_score = cvss_score
        self.source_info = source_info

    def sortname(self):
        # return 10 minus cvss_score
        score_rev = 10 - float(self.cvss_score)
        return '{0}{1}{2}'.format(self.vendor.lower(), self.product.lower(),
                                  score_rev)


def retrieve_bulletin(filename):
    """Return bulletin either by HTTP or by file as tree"""
    if not os.path.isfile(filename):
        print 'downloading file...'
        page = requests.get(url)
        if page.status_code == 200:
            with open(filename, 'w') as f:
                f.write(page.text.encode('utf-8'))
            tree = html.fromstring(page.text)
        else:
            exit
    else:
        print 'reading file from disk...'
        with open(filename, 'r') as f:
            tree = html.fromstring(f.read())
    return tree


def append_vulnerabilities(tree, vuln_type, vuln_list):
    """Append vulnerability from tree of vuln_type to vuln_list"""
    vulns = tree.xpath('//table[@summary="{0}"]/tbody/tr'.format(vuln_type))
    for vuln in vulns:
        vendor = vuln[0].text.split(' -- ')[0]
        product = vuln[0].text.split(' -- ')[1]
        description = vuln[1].text
        published = vuln[2].text
        cvss = vuln[4][0].text
        cvss_score = vuln[3][0].text
        source_info = vuln[4][0].text
        vuln_list.append(Vulnerability(vendor, product, description, published,
                                       cvss, cvss_score, source_info))


def show_vulnerabilities(vuln_list):
    """Return a nicely formatted string of vulnerabilities from vuln_list"""
    for vuln in vuln_list:
        print '|{0}, {1}|{2}|{3}|{4}|{5}|'.format(vuln.vendor, vuln.product,
                                                  vuln.description,
                                                  vuln.published,
                                                  vuln.cvss_score, vuln.cvss)


def main():
    vulnerabilities = []
    tree = retrieve_bulletin(bulletin)
    title = tree.xpath('//title/text()')[0].split(' | ')[0].replace('[\'', '')
    append_vulnerabilities(tree, 'High Vulnerabilities', vulnerabilities)
    append_vulnerabilities(tree, 'Medium Vulnerabilities', vulnerabilities)
    vulnerabilities = sorted(vulnerabilities, key=lambda x: x.sortname())
    show_vulnerabilities(vulnerabilities)


if __name__ == "__main__":
    main()
